<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FlashAttention on Jaehun's Blog</title><link>https://jaehun.me/ko/tags/flashattention/</link><description>Recent content in FlashAttention on Jaehun's Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Tue, 08 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jaehun.me/ko/tags/flashattention/index.xml" rel="self" type="application/rss+xml"/><item><title>Helix Parallelism: Rethinking Sharding Strategies for Interactive Multi-Million-Token LLM Decoding</title><link>https://jaehun.me/ko/ko/posts/2025-07-08-paper-helix/</link><pubDate>Tue, 08 Jul 2025 00:00:00 +0000</pubDate><guid>https://jaehun.me/ko/ko/posts/2025-07-08-paper-helix/</guid><description>&lt;p>&lt;a href="https://research.nvidia.com/publication/2025-07_helix-parallelism-rethinking-sharding-strategies-interactive-multi-million">논문 링크&lt;/a>&lt;/p>
&lt;h1 id="helix-parallelism-초장기-llm-디코딩의-지연-처리량-벽을-깨다">Helix Parallelism: 초장기 LLM 디코딩의 지연-처리량 벽을 깨다&lt;/h1>
&lt;h2 id="한-줄-요약-tldr">한 줄 요약 (TL;DR)&lt;/h2>
&lt;p>&lt;strong>Helix Parallelism은 Attention과 FFN을 서로 다른 병렬화 전략으로 스케줄링해 KV 캐시 중복과 FFN 가중치 로드 병목을 동시에 해소—1 M 토큰 컨텍스트에서 토큰 지연을 최대 1.5 × 줄이고, 동일 지연 예산으로 동시 사용자 수를 32 × 까지 늘린다.&lt;/strong>&lt;/p></description></item><item><title>Native Sparse Attention: Hardware-Aligned and Natively Trainable Sparse Attention</title><link>https://jaehun.me/ko/ko/posts/2025-07-07-paper-2502.11089v2/</link><pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate><guid>https://jaehun.me/ko/ko/posts/2025-07-07-paper-2502.11089v2/</guid><description>&lt;p>&lt;a href="https://arxiv.org/abs/2502.11089v2">논문 링크&lt;/a>&lt;/p>
&lt;h1 id="native-sparse-attention-nsa--64-k-토큰도-11-빠르게-정확도는-그대로">Native Sparse Attention (NSA) — 64 k 토큰도 11× 빠르게, 정확도는 그대로&lt;/h1>
&lt;h2 id="한-줄-요약-tldr">한 줄 요약 (TL;DR)&lt;/h2>
&lt;p>&lt;strong>NSA는 ‘압축 → 선택 → 슬라이딩’ 3 분기 희소 어텐션과 GQA/MQA-친화 커널을 결합해 64 k 컨텍스트에서 디코딩 속도를 11.6 배, 학습 속도를 최대 9 배 높이면서도 Full-Attention보다 평균 성능을 향상시킨다.&lt;/strong>&lt;/p></description></item><item><title>KVzip: Query-Agnostic KV Cache Compression with Context Reconstruction</title><link>https://jaehun.me/ko/ko/posts/2025-06-26-paper-2505.23416v1/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://jaehun.me/ko/ko/posts/2025-06-26-paper-2505.23416v1/</guid><description>&lt;p>&lt;a href="https://arxiv.org/abs/2505.23416v1">논문 링크&lt;/a>&lt;/p>
&lt;h2 id="tldr">⚡️TL;DR&lt;/h2>
&lt;p>&lt;strong>KVzip&lt;/strong>는 LLM의 KV 캐시를 &lt;em>한 번&lt;/em> 압축해도 이후 모든 질의 · 세션에서 재사용할 수 있도록 설계된 &lt;strong>query-agnostic 캐시 컴프레서&lt;/strong>다.
그 결과 &lt;strong>정확도 손실 ≤ 3 pp&lt;/strong>를 유지하면서 **레이턴시 2 × ↓, 메모리 60–394 × ↓**를 동시에 달성한다.&lt;/p></description></item></channel></rss>