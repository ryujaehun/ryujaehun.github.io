<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Long Context on Jaehun's Blog</title><link>https://jaehun.me/ko/tags/Long-Context/</link><description>Recent content in Long Context on Jaehun's Blog</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Mon, 07 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jaehun.me/ko/tags/Long-Context/index.xml" rel="self" type="application/rss+xml"/><item><title>Code I/O: Condensing Reasoning Patterns via Code Input-Output Prediction</title><link>https://jaehun.me/ko/ko/posts/2025-07-07-paper-2502.07316v4/</link><pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate><guid>https://jaehun.me/ko/ko/posts/2025-07-07-paper-2502.07316v4/</guid><description>&lt;p>&lt;a href="https://arxiv.org/abs/2502.07316v4">논문 링크&lt;/a>&lt;/p>
&lt;h1 id="code-io-코드-입출력--자연어-cot로-범용-추론까지데이터-설계만으로-7b-30b-llm을-평균-2-점-끌어올리다">CODE I/O: 코드 입·출력 + 자연어 CoT로 범용 추론까지 — 데이터 설계만으로 7B-30B LLM을 평균 +2 점 끌어올리다&lt;/h1>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>&lt;strong>“코드 함수 → 입력·출력 예측 + 체계적 Chain-of-Thought(CoT)”라는 단일 데이터 파이프라인만으로, 3.5 M 샘플이 14 M 규모 SOTA 데이터보다 더 크고 균형 잡힌 이득(+2.9 점)을 만든다.&lt;/strong>
검증 가능·저비용·다양성 세 마리 토끼를 잡은 &lt;strong>CODE I/O&lt;/strong>는 “데이터 품질 &amp;gt; 데이터 양”이라는 사실을 실험적으로 증명한다.&lt;/p></description></item><item><title>Native Sparse Attention: Hardware-Aligned and Natively Trainable Sparse Attention</title><link>https://jaehun.me/ko/ko/posts/2025-07-07-paper-2502.11089v2/</link><pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate><guid>https://jaehun.me/ko/ko/posts/2025-07-07-paper-2502.11089v2/</guid><description>&lt;p>&lt;a href="https://arxiv.org/abs/2502.11089v2">논문 링크&lt;/a>&lt;/p>
&lt;h1 id="native-sparse-attention-nsa--64-k-토큰도-11-빠르게-정확도는-그대로">Native Sparse Attention (NSA) — 64 k 토큰도 11× 빠르게, 정확도는 그대로&lt;/h1>
&lt;h2 id="한-줄-요약-tldr">한 줄 요약 (TL;DR)&lt;/h2>
&lt;p>&lt;strong>NSA는 ‘압축 → 선택 → 슬라이딩’ 3 분기 희소 어텐션과 GQA/MQA-친화 커널을 결합해 64 k 컨텍스트에서 디코딩 속도를 11.6 배, 학습 속도를 최대 9 배 높이면서도 Full-Attention보다 평균 성능을 향상시킨다.&lt;/strong>&lt;/p></description></item><item><title>DeepSeek-Coder-V2: Breaking the Barrier of Closed-Source Models in Code Intelligence</title><link>https://jaehun.me/ko/ko/posts/2025-06-30-paper-2406.11931v1/</link><pubDate>Mon, 30 Jun 2025 00:00:00 +0000</pubDate><guid>https://jaehun.me/ko/ko/posts/2025-06-30-paper-2406.11931v1/</guid><description>&lt;p>&lt;a href="https://arxiv.org/abs/2406.11931v1">논문 링크&lt;/a>&lt;/p>
&lt;h1 id="deepseek-coder-v2-오픈소스-코드-llm이-gpt-4-급으로-뛰어오른-순간">DeepSeek-Coder-V2: 오픈소스 코드-LLM이 GPT-4 급으로 뛰어오른 순간&lt;/h1>
&lt;h2 id="한-줄-요약-tldr">한 줄 요약 (TL;DR)&lt;/h2>
&lt;p>&lt;strong>236 B 파라미터 MoE + 10.2 T 토큰 + YaRN 128 K 컨텍스트&lt;/strong> 만으로, **HumanEval 90.2 %·MATH 75.7 %**를 기록해 오픈모델 최초로 GPT-4-Turbo와 동일 선상에 올라섰다.&lt;/p></description></item><item><title>KVzip: Query-Agnostic KV Cache Compression with Context Reconstruction</title><link>https://jaehun.me/ko/ko/posts/2025-06-26-paper-2505.23416v1/</link><pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate><guid>https://jaehun.me/ko/ko/posts/2025-06-26-paper-2505.23416v1/</guid><description>&lt;p>&lt;a href="https://arxiv.org/abs/2505.23416v1">논문 링크&lt;/a>&lt;/p>
&lt;h2 id="tldr">⚡️TL;DR&lt;/h2>
&lt;p>&lt;strong>KVzip&lt;/strong>는 LLM의 KV 캐시를 &lt;em>한 번&lt;/em> 압축해도 이후 모든 질의 · 세션에서 재사용할 수 있도록 설계된 &lt;strong>query-agnostic 캐시 컴프레서&lt;/strong>다.
그 결과 &lt;strong>정확도 손실 ≤ 3 pp&lt;/strong>를 유지하면서 **레이턴시 2 × ↓, 메모리 60–394 × ↓**를 동시에 달성한다.&lt;/p></description></item><item><title>Compress, Gather, and Recompute: REFORMingLong-Context Processing in Transformers</title><link>https://jaehun.me/ko/ko/posts/2025-06-24-paper-2506.01215v1/</link><pubDate>Tue, 24 Jun 2025 00:00:00 +0000</pubDate><guid>https://jaehun.me/ko/ko/posts/2025-06-24-paper-2506.01215v1/</guid><description>&lt;p>&lt;a href="https://arxiv.org/abs/2506.01215v1">논문 링크&lt;/a>&lt;/p>
&lt;h1 id="-reform-100만-토큰도-잊지-않는-llm-추론-파이프라인">⚡️ REFORM: 100만 토큰도 잊지 않는 LLM 추론 파이프라인&lt;/h1>
&lt;h2 id="한-줄-요약-tldr">한 줄 요약 (TL;DR)&lt;/h2>
&lt;p>&lt;strong>REFORM&lt;/strong>은 &lt;em>압축(Compress) → 선별(Gather) → 선택적 재계산(Recompute)&lt;/em> 세 단계를 하나로 묶어,&lt;br>
단일 H100 GPU에서도 &lt;strong>100 만 토큰&lt;/strong> 문맥을 &lt;em>망각 없이&lt;/em> 다루고 &lt;strong>추론 지연·메모리&lt;/strong>까지 줄여 준다.&lt;/p></description></item></channel></rss>